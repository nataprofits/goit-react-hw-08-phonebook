{"version":3,"file":"static/js/728.d37b98bb.chunk.js","mappings":"gMACaA,E,QAAYC,GAAAA,EAAH,gF,SCMtB,EALkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjB,OACI,SAAC,KAAD,CAAcA,KAAMA,EAAMC,OAAQ,SAAAC,GAAO,OAAI,SAACJ,EAAD,UAAYI,GAAhB,GAEhD,C,iICHYC,GAAeJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,8qBA4BZM,EAAgBN,EAAAA,GAAAA,MAAH,oLASbO,GAAgBP,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAH,qPAYbS,EAAiBT,EAAAA,GAAAA,OAAH,yV,iDCrCrBU,EAAgB,CAAET,KAAM,GAAIU,MAAO,GAAIC,SAAU,IAEjDC,EAASC,EAAAA,KAAaC,MAAM,CAChCd,KAAMa,EAAAA,KAAaE,IAAI,GAAGC,WAC1BN,MAAOG,EAAAA,KAAaE,IAAI,GAAGC,WAC3BL,SAAUE,EAAAA,KAAaE,IAAI,GAAGE,IAAI,IAAID,aAEzB,SAASE,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAiBjB,OACE,SAAC,KAAD,CACEX,cAAeA,EACfY,iBAAkBT,EAClBU,SAnBiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BC,QAAQC,IAAIH,GACZ,IAAQvB,EAA0BuB,EAA1BvB,KAAMU,EAAoBa,EAApBb,MAAOC,EAAaY,EAAbZ,SAErBQ,GACEQ,EAAAA,EAAAA,IAAS,CACP3B,KAAAA,EACAU,MAAAA,EACAC,SAAAA,KAEFiB,SAASC,MAAK,kBAAIC,EAAAA,GAAAA,QAAc,2BAAlB,IAA+CC,OAAM,kBAAKD,EAAAA,GAAAA,MAAY,kCAAjB,IAErEN,GACD,EAGC,UAKE,UAACrB,EAAD,YACE,UAACE,EAAD,CAAe2B,QAAQ,OAAvB,UAA8B,YAE5B,SAAC1B,EAAD,CAAe2B,KAAK,OAAOjC,KAAK,UAChC,SAACkC,EAAA,EAAD,CAAWlC,KAAK,aAGlB,UAACK,EAAD,CAAe2B,QAAQ,QAAvB,UAA+B,SAE7B,SAAC1B,EAAD,CAAe2B,KAAK,QAAQjC,KAAK,WACjC,SAACkC,EAAA,EAAD,CAAWlC,KAAK,cAGlB,UAACK,EAAD,CAAe2B,QAAQ,WAAvB,UAAkC,YAEhC,SAAC1B,EAAD,CAAe2B,KAAK,WAAWjC,KAAK,cACpC,SAACkC,EAAA,EAAD,CAAWlC,KAAK,iBAElB,SAACQ,EAAD,CAAgByB,KAAK,SAArB,SAA8B,iBAIrC,CCnEc,SAASE,IACtB,OACE,0BACE,SAACjB,EAAD,KAGL,C","sources":["components/FormError/FormError.styled.js","components/FormError/FormError.jsx","components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/Register.js"],"sourcesContent":["import styled from 'styled-components';\nexport const ErrorText = styled.p`\n  color: red;\n  font-size: 15px;\n  font-weight: 600;\n`;\n","import { ErrorMessage } from \"formik\";\nimport { ErrorText } from \"./FormError.styled\";\nconst FormError = ({ name }) => {\n    return (\n        <ErrorMessage name={name} render={message => <ErrorText>{message}</ErrorText>}/>\n    )\n};\nexport default FormError;","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormRegister = styled(Form)`\n  /* border: 2px solid yellow;\n  border-radius: 40px;\n  background: linear-gradient(146deg, #6c6c66, transparent);\n  width: 400px;\n  height: 360px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 20px;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  margin-right: auto;\n  margin-left: auto; */\n   display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  align-items: flex-start;\n  background: linear-gradient(146deg, #6c6c66, transparent);\n  border: 2px solid black;\n  border-radius: 10px;\n  width: 300px;\n  padding: 10px;\n  margin-right: avto;\n  margin-left: avto;\n  height: fit-content;\n  gap: 20px;\n`;\nexport const LabelRegister = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 20px;\n  font-weight: 600;\n  font-family: sans-serif;\n  color: rgb(217, 232, 64);\n`;\nexport const InputRegister = styled(Field)`\n  width: 250px;\n  border: 1px solid #dcdbdb;\n  padding: 5px;\n  font-size: 15px;\n  outline: transparent;\n\n  &:focus {\n    border: 1px solid rgb(197 216 14);\n    box-shadow: rgb(207 226 21) 5px 0px 27px -8px;\n  }\n`;\nexport const ButtonRegister = styled.button`\n  width: 100px;\n  height: 35px;\n  padding: 5px;\n  background-color: white;\n  border: 1px solid #dedede;\n  font-size: 13px;\n  font-weight: 600;\n  border-radius: 6px;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: rgb(202 222 4);\n    box-shadow: 5px 0px 27px -8px rgba(91, 95, 206, 1);\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { register } from '../../redux/auth/auth-operations';\nimport {\n  FormRegister,\n  LabelRegister,\n  InputRegister,\n  ButtonRegister,\n} from '../../components/RegisterForm/RegisterForm.styled';\n\nimport {  Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormError from 'components/FormError/FormError';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst initialValues = { name: '', email: '', password: '' };\n\nconst schema = Yup.object().shape({\n  name: Yup.string().min(4).required(),\n  email: Yup.string().min(4).required(),\n  password: Yup.string().min(5).max(16).required(),\n});\nexport default function RegisterForm() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    console.log(values);\n    const { name, email, password } = values;\n\n    dispatch(\n      register({\n        name,\n        email,\n        password,\n      })\n    ).unwrap().then(()=>toast.success(\"Registration succesfully\")).catch(()=> toast.error(\"Something went wrong. Try again\"));\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormRegister>\n        <LabelRegister htmlFor=\"name\">\n          Username\n          <InputRegister type=\"text\" name=\"name\" />\n          <FormError name=\"name\"/>\n        </LabelRegister>\n\n        <LabelRegister htmlFor=\"email\">\n          Email\n          <InputRegister type=\"email\" name=\"email\" />\n          <FormError name=\"email\"/>\n        </LabelRegister>\n\n        <LabelRegister htmlFor=\"password\">\n          Password\n          <InputRegister type=\"password\" name=\"password\" />\n          <FormError name=\"password\"/>\n        </LabelRegister>\n        <ButtonRegister type=\"submit\">Register</ButtonRegister>\n      </FormRegister>\n    </Formik>\n  );\n}\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\nexport default function Register() {\n  return (\n    <div>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["ErrorText","styled","name","render","message","FormRegister","Form","LabelRegister","InputRegister","Field","ButtonRegister","initialValues","email","password","schema","Yup","shape","min","required","max","RegisterForm","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","console","log","register","unwrap","then","toast","catch","htmlFor","type","FormError","Register"],"sourceRoot":""}